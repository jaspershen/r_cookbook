[
["Rmarkdown.html", "Chapter 3 RMarkdown 3.1 安装 3.2 Rmarkdown结构 3.3 YAML 3.4 R代码块 3.5 代码块参数 (Chunk options) 3.6 全局代码块参数 3.7 具体问题的cookbook 3.8 Rmarkdown特有语法 3.9 输出格式 3.10 Blogdown 3.11 Bookdown 3.12 Presentation 3.13 Pagedown 3.14 Pkgdown", " Chapter 3 RMarkdown Rmarkdown是Rstudio公司出品的.所有markdown的语法都支持.但是加入了很多强大的功能,因此可以做更多原生markdown无法完成的任务.成为数据分析以及报告自动化和重复化领域一个非常常用的工具. 可以参考下面的书,是rmarkdown的作者Yihui Xie写的. https://bookdown.org/yihui/rmarkdown/installation.html 也可以查看这个视频简介. What is R Markdown? from RStudio, Inc. on Vimeo. 3.1 安装 需要安装R和Rstudio. install.packages(&#39;rmarkdown&#39;) 如果想要转换为PDF格式,需要安装LaTex. install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() # install TinyTeX 3.2 Rmarkdown结构 Rmarkdown可以分为三部分,分别是YAML, 文本部分以及代码块. YAML YAML在每个rmakdown文件的最开头,定义了Markdown文件的很多性质.YAML是指YAin’t Markup Language, https://en.wikipedia.org/wiki/YAML. --- title: &quot;Hello R Markdown&quot; author: &quot;Awesome Me&quot; date: &quot;2018-02-14&quot; output: html_document --- YAML用---包围起来. 文本部分 YAML下面就是文本部分,其实也就是Markdown. 代码块 在Rmarkdown中,可以插入可以执行的代码块,不近包括R,还包括pyton,SQL等等. 上图显示的就是一个完整的Rmarkdown文件. 3.3 YAML 3.4 R代码块 R代码块的格式为: ```{r} library(tidyverse) library(ggplot2) ``` 可以看到,跟markdown代码块唯一的不同就是需要使用{r}来定义该代码块为R语言.除此之外,可以通过在大括号中设置一系列的参数,来控制代码块的输出.包括文本输出,图片输出以及表格输出等. 比如,可以通过设置result = 'hide'从而使文本结果不输出.也可以通过设置fig.width和fig.height来控制输出图片的宽度和高度. 另外还可以通过eval参数(evaulate)来控制代码块是否执行,如果设置为FALSE,则代码块不会执行. 比如: 下面这段代码就会执行,并输出结果. ```{r, eval = TRUE} library(ggplot2) ggplot(mtcars, aes(x = mpg, y = wt, color = gear)) + geom_point() + theme_bw() ``` library(ggplot2) ggplot(mtcars, aes(x = mpg, y = wt, color = gear)) + geom_point() + theme_bw() 而这段代码则不会执行 ```{r, eval = FALSE} library(ggplot2) ggplot(mtcars, aes(x = mpg, y = wt, color = gear)) + geom_point() + theme_bw() ``` library(ggplot2) ggplot(mtcars, aes(x = mpg, y = wt, color = gear)) + geom_point() + theme_bw() 3.5 代码块参数 (Chunk options) 代码块有非常多的参数(chunk options),常用的总结如下,完整的可以在yihui xie的博客中. https://yihui.org/knitr/options/ 3.5.1 代码是否执行 eval:设置为TRUE或者FALSE来控制代码块是否执行. ###文本输出结果 echo:设置为TRUE或者FALSE,控制代码块是否显示在最终的渲染结果中. results: markup:mark up the results using the output hook, e.g. put results in a special LaTeX environment. asis:将R原始结果输出到最终文本中. hide:隐藏R执行结果,但是对error,message和warning没有作用. collapse:设置为TRUE或者FALSE.用来控制文本输出结果是否和代码块混在一起. warning:设置为TRUE或者FALSE.如果代码执行,是否显示其中的warning信息. error:设置为TRUE或者FALSE.如果设置为TRUE,即使代码执行出现错误,仍然会输出渲染结果,如果设置为FALSE,代码执行错误,则渲染也会出错,不会在继续输出结果. ‘message’: 设置为TRUE或者FALSE.代码执行时是否输出message信息. include:是否将代码输出结果显示在最终的渲染输出文本中. 显示代码和输出结果: ```{r, eval = TRUE, include = TRUE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() 显示代码不显示输出结果: ```{r, eval = TRUE, include = FALSE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` strip.white:设置为TRUE或者FALSE.是否输出在最终输出渲染结果中代码块上下的白线. ```{r, eval = FALSE, strip.white = TRUE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ```{r, eval = FALSE, strip.white = FALSE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() 3.5.2 代码控制 (code decoration) tidy: TRUE:使用formatR对代码格式进行整理. FALSE:保持原格式. styler:使用styler包对代码格式进行整理. comment:默认为##,表示对于R代码输出的文本结果前面会有##进行注释. highlight:逻辑值.是否对代码进行高亮. ```{r, eval = FALSE, highlight = TRUE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() 3.5.3 缓冲 (cache) cache:逻辑值.是否需要缓冲代码块运行结果,对于代码运行时间比较长的rmakdown文件,可以设置为TRUE,这样重新渲染的时候,会减少运行时间. cache.path:默认为’cache/’,设置如果缓冲为TRUE时,缓冲结果存储的文件夹位置. 3.5.4 图像控制(plot) fig.path:默认为’figure/’,用来设置生成figure的存储位置. fig.show:如何显示plot. asis: plot在产生他们的代码后面. hold:所有代码产生的图片都放在一个完整的代码块之后. animate: 将所有产生的图片合成一个动画图片. hide:产生所有图片,但是并不展示. ```{r, eval = TRUE, fig.show = &#39;asis&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ``` library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ```{r, eval = TRUE, fig.show = &#39;hold&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ``` library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ```{r, eval = TRUE, fig.show = &#39;animate&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ``` library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() dpi:输出图片dpi,默认72.(dpi * inches = pixels) fig.width和fig.height:输出图片宽度和高度,默认为7(单位英寸). fig.asp:图片的高宽比.默认为NULL.如果设置为数值,比如设置为0.7.则fig.height会被覆盖,然后设置为fig.width*fig.asp. out.width和out.height:默认为NULL.可以设置为100%,这样在最终的渲染结果中就是和页面宽度一致. fig.align:图片的align位置.默认为left,可以为right或者center. fig.cap:图片标题.设置为NA或者NULL,则没有. fig.subcap:图片副标题. 3.6 全局代码块参数 如果某些代码块参数在全局中都是一样的,可以在全局进行设置. 在YAML下以及所有的markdown文本之上,插入下列代码块. ```{r, include = FALSE} knitr::opts_chunk$set(fig.width = 8, collapse = TRUE) ``` 使用的是knitr包中的opts_chunk$set()函数.可以将比较常见常用的代码块设置在这里进行设置.这里就是全局的设置. 3.7 具体问题的cookbook 输出两幅图,并且并列排布 结合代码块参数fig.show(设置为hold)和out.width(设置为50%). ```{r, eval = TRUE, fig.show = &#39;hold&#39;, out.width = &#39;50%&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() ``` 3.8 Rmarkdown特有语法 Rmarkdown相比markdown来说,因为可以直接运行代码,因此有一些特有的语法,比如插入图片等. 3.8.1 图片 (image) 使用knitr::include_graphics()函数可以直接插入图片,然后使用代码块参数可以对图片进行设置,宽度高度,对齐等等. ```{r, eval = TRUE, fig.show = &#39;hold&#39;, out.width = &#39;50%&#39;, fig.align = &#39;center&#39;, fig.cap = &quot;小涛&quot;} knitr::include_graphics(&#39;images/Screen Shot 2020-03-13 at 10.48.36 PM.png&#39;) ``` Figure 3.1: 小涛 3.8.2 表格 (Table) knitr::ktable()函数 ```{r, eval = TRUE} knitr::kable(iris[1:5, ], caption = &#39;A caption&#39;) ``` Table 3.1: A caption Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 该函数又很多参数可以用来控制输出表格的格式,具体的可以参考帮助文档.也可以参考下面的帖子: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html 3.8.3 地图 (map) 使用leaflet包可以插入地图. ```{r out.width=&#39;100%&#39;, echo=FALSE} library(leaflet) leaflet() %&gt;% addTiles() %&gt;% setView(-93.65, 42.0285, zoom = 17) %&gt;% addPopups( -93.65, 42.0285, &#39;Here is the &lt;b&gt;Department of Statistics&lt;/b&gt;, ISU&#39; ) ``` 3.9 输出格式 3.10 Blogdown 3.11 Bookdown 3.12 Presentation 3.13 Pagedown 3.14 Pkgdown "]
]
