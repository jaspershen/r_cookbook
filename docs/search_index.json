[
["index.html", "R cookbook from Xiaotao Shen Welcome", " R cookbook from Xiaotao Shen Dr. Xiaotao Shen Postdoctoral at Snyder lab Stanford University School of Medicine shenxt.info shenxt@stanford.edu Begin at 2020-03-01 and Update at 2020-03-17 Welcome 这本书用来系统记录在学习过程中的遇到的问题,学到的知识. You can contact me via the social websites below: Personal website Github Wechat QQ shenxt at stanford.edu Linkedin Please enable JavaScript to view the comments powered by Disqus. "],
["markdown.html", "Chapter 1 Markdown 1.1 Markdown语法 1.2 标题 (Header) 1.3 图片 (Image) 1.4 链接 (Links) 1.5 强调 (Emphasize) 1.6 引用(Blockquotes) 1.7 代码块 (Code chunks) 1.8 水平线 (Horizontal rule) 1.9 列表 (List) 1.10 表格 (Tables) 1.11 段落 1.12 插入icon 1.13 数学公式 (Equations) 1.14 视频 (Video)和音乐 (music) 1.15 Markdown编辑器", " Chapter 1 Markdown 首先从Markdown的基础语法开始. 1.1 Markdown语法 markdown语法一般是使用符号转变为特殊格式.这样,看起来markdown文件都是plain text(纯文本),但是渲染之后,就可以得到特殊格式的文件了. 很多语法没有必要记住,只需要记住大概常用的几个就好,遇到不会的,直接google就可以. 1.2 标题 (Header) Markdown一共支持六级标题. 语法: # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 1.3 图片 (Image) 注意#和文字之间一定要空格. 插入图片的基本语法: ![](图片链接或者本地位置) 比如使用下面语句: ![](https://www.shenxt.info/files/wechat_QR.jpg) 这种插入图片的办法,不能设置图片的大小,如果想要设置图片大小,可以使用HTML语法(img标签)插入,markdown是支持HTML语法的. &lt;img src = &#39;https://www.shenxt.info/files/wechat_QR.jpg&#39; alt = &#39;shenxiaotao&#39; /&gt; HTML img标签还有很多的其他功能,比如对齐等. 常用的一些参数: 属性 描述 alt 图像替代文本 src 图片链接或者本地地址 height 图片高度,单位可以是%或者pixel weight 图片宽度,单位可以是%或者pixel weight 图片宽度,单位可以是%或者pixel align 图片位置,只支持left或者right 图片默认是靠左对齐.如果想要居中,很奇怪不能使用&lt;img&gt;标签,需要使用&lt;p&gt;标签.也就是段落. &lt;p align = &quot;center&quot;&gt; &lt;img src = &#39;https://www.shenxt.info/files/wechat_QR.jpg&#39; alt = &#39;shenxiaotao&#39; height = 50% width = 50% /&gt; &lt;/p&gt; 1.4 链接 (Links) 直接写url 语法: https://www.shenxt.info/ https://www.shenxt.info/ 将网址超链接给某段文字 语法: 想要访问我的网站,请点击[这里](https://www.shenxt.info/) 想要访问我的网站,请点击这里 HTML插入链接 如果我们想要更多的链接功能,比如点击链接打开新的窗口.这时候可以使用&lt;a&gt;标签. 语法: &lt;a href=&quot;url&quot;&gt;Link text&lt;/a&gt; 常用属性含义如下: 属性 描述 href 链接网址url target 在何处打开链接, _blank, _parent, _self, _top 比如我们插入一个网址,点击之后在新的网页打开. 想要访问我的网站,请点击&lt;a href=&quot;https://www.shenxt.info/&quot; target = &#39;_blank&#39;&gt;这里&lt;/a&gt;. 想要访问我的网站,请点击这里. 将超链接绑定在图片上 使用HTML语法,可以将超链接绑定在一个图片上. 比如: &lt;a href=&quot;https://www.shenxt.info/&quot; target = &#39;_blank&#39;&gt;&lt;img src = &#39;https://www.shenxt.info/files/wechat_QR.jpg&#39; alt = &#39;shenxiaotao&#39; height = 50% width = 50% /&gt;&lt;/a&gt; 点击下图查看我的网站: 1.5 强调 (Emphasize) 强调包括斜体,高亮,加粗等等. 斜体 语法如下: *这是斜体* _这也是斜体_ 这是斜体 这也是斜体 加粗 语法如下: **这是粗体** __这也是粗体__ 这是粗体 这也是粗体 加粗和斜体 语法如下: ***这是粗体也是斜体*** ___这是粗体也是斜体___ 这是粗体也是斜体 这是粗体也是斜体 删除线 语法如下: ~~删除这句话~~ 删除这句话 其他可以使用HTML语法实现的强调 Markdown只有以上几种强调的用法,使用HTML可以实现一些其他的内容.比如字体颜色等. 字体颜色可以使用&lt;font&gt;标签实现. 比如我们想用红色字体. &lt;font color=&quot;red&quot;&gt;这段话使用红色字体.&lt;/font&gt; 这段话使用红色字体. &lt;font&gt;标签常用属性: 属性 描述 color 颜色 face 字体 size 字体大小 1.6 引用(Blockquotes) 语法: &gt; 这是一句引用 这是一句引用 语法: &gt; 这是一段引用 &gt; 这是一段引用 这是一段引用 这是一段引用 1.7 代码块 (Code chunks) 单独代码 语法: ``` library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` 最后渲染结果为: library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() 如果是使用Rmarkdown,还可以直接让代码运行出现结果. 语法: ```{r, eval = TRUE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` Rmarkdown中代码块中有很多内容可以设置. 行内代码 行内代码可以使用``(中间为内容或者代码). 比如: `行内代码`可以用来强调某个部分. 行内代码可以用来强调某个部分. 当然,在rmakdown中,代码块是可以运行的,所以行内代码也可以运行得到结果. 比如: There were 50 cars studied There were 50 cars studied 1.8 水平线 (Horizontal rule) 语法: 这是一条水平线. *** 这也是一条水平线. --- 这是一条水平线. 这也是一条水平线. 1.9 列表 (List) 有序列表 (Ordered list) 直接使用数字即可 语法: 1. Item 1 2. Item 2 3. Item 3 Item 1 Item 2 Item 3 无序列表 (Unordered list) 无需列表可以使用*或者-来创建. 语法: * Item 1 * Item 2 * Item 2.1 * Item 2.2 * Item 3 Item 1 Item 2 Item 2.1 Item 2.2 Item 3 语法: - Item 1 - Item 2 - Item 2.1 - Item 2.2 - Item 3 Item 1 Item 2 Item 2.1 Item 2.2 Item 3 任务列表 (Task list) 有的markdown编辑器是支持任务列表的,比如github,但是有些也不支持.比如rmakdown就是不支持的(本书就是用rmakrdown写的). 语法: - [x] Write the press release - [ ] Update the website - [ ] Contact the media [x] Write the press release [ ] Update the website [ ] Contact the media 1.10 表格 (Tables) 原生态的markdown表格语法非常简单. 语法: | First name | Last name | Sex | | ------------- |-------------| -----| | Xiaotao |Shen | Male | | Chuchu | Wang | Female | First name Last name Sex Xiaotao Shen Male Chuchu Wang Female Rmarkdown可以使用函数来插入表格. DT包 语法: ```{r, eval=TRUE} library(DT) DT::datatable( head(iris, 10), fillContainer = TRUE, options = list(pageLength = 4) ) ``` library(DT) DT::datatable( head(iris, 10), fillContainer = TRUE, options = list(pageLength = 4) ) knitr包 语法: ```{r, eval=TRUE} knitr::kable(head(iris), format = &#39;html&#39;) ``` knitr::kable(head(iris), format = &#39;html&#39;) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 1.11 段落 markdown中对于段落的控制比较少,如果需要对段落进行修饰,比如对齐,段间距等等,需要使用HTML&lt;p&gt;标签进行设置. 对齐 对齐是&lt;p&gt;标签中的align属性. 左对齐 &lt;p align = &quot;left&quot;&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. &lt;/p&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. 右对齐 &lt;p align = &quot;right&quot;&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. &lt;/p&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. 居中对齐 &lt;p align = &quot;center&quot;&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. &lt;/p&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. 两端对齐 &lt;p align = &quot;justify&quot;&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. &lt;/p&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. 行间距 使用&lt;p&gt;标签的style属性进行设置. 将line-height设置为300%相当于是三倍行距. &lt;p align = &quot;justify&quot; style=&quot;line-height:300%&quot;&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. &lt;/p&gt; Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. 1.12 插入icon 可以插入符号工具包Font Awesome.一般的markdown编辑器都已经支持直接使用HTML插入icon. 比如插入微信图标: &lt;i class=&quot;fa fa-weixin&quot;&gt;&lt;/i&gt; 如果不支持,可以在markdown的最底端插入下面的代码: &lt;head&gt; &lt;script defer src=&quot;https://use.fontawesome.com/releases/v5.0.13/js/all.js&quot;&gt;&lt;/script&gt; &lt;script defer src=&quot;https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.0.13/css/all.css&quot;&gt; 当然也可以使用HTML的&lt;a&gt;标签让icon绑定一个超链接. &lt;a href=&quot;https://www.shenxt.info/files/wechat_QR.jpg&quot;&gt;&lt;i class=&quot;fa fa-weixin&quot;&gt;&lt;/i&gt;&lt;/a&gt; 1.13 数学公式 (Equations) Markdown可以方便插入数学公式. 1.13.1 行内和行外 如果是将公式插入到行内,使用$公式$. 如果是将公式单独出来,使用$$公式$$. 1.13.2 上标和下标 上标^ 比如:$x^4$:\\(x^4\\). 下标_ 比如:$x_2$:\\(x_2\\) 1.13.3 占位符 空格 单个空格:\\quad. 比如:$x\\quady$: \\(x \\quad y\\) 两个个空格:\\qquad. 比如:$x\\qquady$: \\(x \\qquad y\\) 大空格 符号:\\ 比如:$x\\y$:\\(x\\ y\\). 中空格 符号:\\: 比如:$x\\:y$:\\(x\\: y\\). 小空格 符号:\\, 比如:$x\\,y$:\\(x\\, y\\). 紧贴 符号:\\! 比如:$x\\!y$:\\(x\\! y\\). 1.13.4 四则运算 平均数运算 符号：\\overline{算式}，如：$\\overline{xyz}$:\\(\\overline{xyz}\\) 开二次方运算，符号：\\sqrt，如：$\\sqrt x$:\\(\\sqrt x\\) 开方运算，符号：\\sqrt[开方数]{被开方数}，如：$\\sqrt[3]{x+y}$:\\(\\sqrt[3]{x+y}\\) 对数运算，符号：\\log，如：$\\log(x)$:\\(\\log(x)\\). 极限运算，符号：\\lim，如：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$:\\(\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}\\) 极限运算，符号：\\displaystyle \\lim，如：$\\displaystyle \\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$:\\(\\displaystyle \\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}\\) 求和运算，符号：\\sum，如：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$:\\(\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}\\) 求和运算，符号：\\displaystyle \\sum，如：$\\displaystyle \\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$:\\(\\displaystyle \\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}\\) 积分运算，符号：\\int，如：$\\int^{\\infty}_{0}{xdx}$:\\(\\int^{\\infty}_{0}{xdx}\\) 积分运算，符号：\\displaystyle \\int，如：$\\displaystyle \\int^{\\infty}_{0}{xdx}$:\\(\\displaystyle \\int^{\\infty}_{0}{xdx}\\) 微分运算，符号：\\partial，如：$\\frac{\\partial x}{\\partial y}$:\\(\\frac{\\partial x}{\\partial y}\\) 矩阵表示，符号：\\begin{matrix} \\end{matrix}，如：$\\left[ \\begin{matrix} 1 &amp;2 &amp;\\cdots &amp;4\\5 &amp;6 &amp;\\cdots &amp;8\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\13 &amp;14 &amp;\\cdots &amp;16\\end{matrix} \\right]$\\(\\left[ \\begin{matrix} 1 &amp;2 &amp;\\cdots &amp;4\\5 &amp;6 &amp;\\cdots &amp;8\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots\\13 &amp;14 &amp;\\cdots &amp;16\\end{matrix} \\right]\\) 1.13.5 集合运算 属于运算，符号：\\in，如：$x \\in y$\\(x \\in y\\) 不属于运算，符号：\\notin，如：$x \\notin y$:\\(x \\notin y\\) 不属于运算，符号：\\not\\in，如：$x \\not\\in y$\\(x \\not\\in y\\) 子集运算，符号：\\subset，如：$x \\subset y$\\(x \\subset y\\) 子集运算，符号：\\supset，如：$x \\supset y$\\(x \\supset y\\) 真子集运算，符号：\\subseteq，如：$x \\subseteq y$\\(x \\subseteq y\\) 非真子集运算，符号：\\subsetneq，如：$x \\subsetneq y$\\(x \\subsetneq y\\) 真子集运算，符号：\\supseteq，如：$x \\supseteq y$\\(x \\supseteq y\\) 非真子集运算，符号：\\supsetneq，如：$x \\supsetneq y$\\(x \\supsetneq y\\) 非子集运算，符号：\\not\\subset，如：$x \\not\\subset y$\\(x \\not\\subset y\\) 非子集运算，符号：\\not\\supset，如：$x \\not\\supset y$\\(x \\not\\supset y\\) 并集运算，符号：\\cup，如：$x \\cup y$\\(x \\cup y\\) 交集运算，符号：\\cap，如：$x \\cap y$\\(x \\cap y\\) 差集运算，符号：\\setminus，如：$x \\setminus y$\\(x \\setminus y\\) 同或运算，符号：\\bigodot，如：$x \\bigodot y$\\(x \\bigodot y\\) 同与运算，符号：\\bigotimes，如：$x \\bigotimes y$\\(x \\bigotimes y\\) 实数集合，符号：\\mathbb{R}，如：$\\mathbb{R}$ \\(\\mathbb{R}\\) 自然数集合，符号：\\mathbb{Z}，如：$\\mathbb{Z}$ \\(\\mathbb{Z}\\) 空集，符号：\\emptyset，如：$\\emptyset$\\(\\emptyset\\) 1.13.6 数学符号 无穷，符号：\\infty，如：$\\infty$\\(\\infty\\) 虚数，符号：\\imath，如：$\\imath$\\(\\imath\\) 虚数，符号：\\jmath，如：$\\jmath$\\(\\jmath\\) 数学符号，符号\\hat{a}，如：$\\hat{a}$\\(\\hat{a}\\) 数学符号，符号\\check{a}，如：$\\check{a}$\\(\\check{a}\\) 数学符号，符号\\breve{a}，如：$\\breve{a}$\\(\\breve{a}\\) 数学符号，符号\\tilde{a}，如：$\\tilde{a}$\\(\\tilde{a}\\) 数学符号，符号\\bar{a}，如：$\\bar{a}$\\(\\bar{a}\\) 矢量符号，符号\\vec{a}，如：$\\vec{a}$\\(\\vec{a}\\) 数学符号，符号\\acute{a}，如：$\\acute{a}$\\(\\acute{a}\\) 数学符号，符号\\grave{a}，如：$\\grave{a}$\\(\\grave{a}\\) 数学符号，符号\\mathring{a}，如：$\\mathring{a}$\\(\\mathring{a}\\) 一阶导数符号，符号\\dot{a}，如：$\\dot{a}$\\(\\dot{a}\\) 二阶导数符号，符号\\ddot{a}，如：$\\ddot{a}$\\(\\ddot{a}\\) 上箭头，符号：\\uparrow，如：$\\uparrow$\\(\\uparrow\\) 上箭头，符号：\\Uparrow，如：$\\Uparrow$\\(\\Uparrow\\) 下箭头，符号：\\downarrow，如：$\\downarrow$\\(\\downarrow\\) 下箭头，符号：\\Downarrow，如：$\\Downarrow$\\(\\Downarrow\\) 左箭头，符号：\\leftarrow，如：$\\leftarrow$\\(\\leftarrow\\) 左箭头，符号：\\Leftarrow，如：$\\Leftarrow$\\(\\Leftarrow\\) 右箭头，符号：\\rightarrow，如：$\\rightarrow$\\(\\rightarrow\\) 右箭头，符号：\\Rightarrow，如：$\\Rightarrow$\\(\\Rightarrow\\) 底端对齐的省略号，符号：\\ldots，如：$1,2,\\ldots,n$\\(1,2,\\ldots,n\\) 中线对齐的省略号，符号：\\cdots，如：$x_1^2 + x_2^2 + \\cdots + x_n^2$\\(x_1^2 + x_2^2 + \\cdots + x_n^2\\) 竖直对齐的省略号，符号：\\vdots，如：$\\vdots$\\(\\vdots\\) 斜对齐的省略号，符号：\\ddots，如：$\\ddots$\\(\\ddots\\) 1.13.7 希腊字母 字母 符合 字母 符号 \\(A\\) $A$ \\(\\alpha\\) $\\alpha$ \\(B\\) $B$ \\(\\beta\\) $\\beta$ \\(\\Gamma\\) $\\Gamma$ \\(\\gamma\\) $\\gamma$ \\(\\Delta\\) $\\Delta$ \\(\\delta\\) $\\delta$ \\(E\\) $E$ \\(\\epsilon\\) $\\epsilon$ \\(Z\\) $Z$ \\(\\zeta\\) $\\zeta$ \\(H\\) $H$ \\(\\eta\\) $\\eta$ \\(\\Theta\\) $Theta$ \\(\\theta\\) $\\theta$ \\(I\\) $I$ \\(\\iota\\) $\\iota$ \\(K\\) $K$ \\(\\kappa\\) $\\kappa$ \\(\\Lambda\\) $\\Lambda$ \\(\\lambda\\) $\\lambda$ \\(M\\) $M$ \\(\\mu\\) $\\mu$ \\(N\\) $N$ \\(\\nu\\) $\\nu$ \\(\\Xi\\) $\\Xi$ \\(\\xi\\) $\\xi$ \\(O\\) $O$ \\(\\omicron\\) $\\omicron$ \\(\\Pi\\) $\\Pi$ \\(\\pi\\) $\\pi$ \\(P\\) $P$ \\(\\rho\\) $\\rho$ \\(\\Sigma\\) $\\Sigma$ \\(\\sigma\\) $\\sigma$ \\(T\\) $T$ \\(\\tau\\) $\\tua$ \\(\\Upsilon\\) $\\Upsilon$ \\(\\upsilon\\) $\\upsilon$ \\(\\Phi\\) $\\Phi$ \\(\\phi\\) $\\phi$ \\(X\\) $X$ \\(\\chi\\) $\\chi$ \\(\\Psi\\) $\\Psi$ \\(\\psi\\) $\\psi$ \\(\\Omega\\) $\\Omega$ \\(\\omega\\) $\\omega$ 1.14 视频 (Video)和音乐 (music) 原生markdown并不支持视频插入,需要使用HTML语法.一般需要视频网站支持.比如插入youtube视频,需要到youtube视频下方,点击分享按钮,然后点击Embed,会给出内嵌的HTML代码.复制到markdown即可. &lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/GCmnvXXrpRk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt; 同理,对于音乐,也需要音乐来源网站支持.比如我们插入网易音乐: &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&#39;100%&#39; height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=85569&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt; 1.15 Markdown编辑器 很多编辑器都支持markdown语法, 还有一些专门用于markdown的编辑器. Typora 官网如下: https://typora.io/ 感觉是现在最佳的markdown编辑器.实时渲染. 另外还可以导出为PDF等其他格式,非常全能. 网易云笔记 网易云笔记也支持markdown文件.并且能够在右侧实时显示渲染结果.也非常不错. Atom 是github官方出的文本编辑器,并不推荐使用. Rstudio 配合Rmarkdown使用非常好. Jupyter notebook Python数据分析的非常好的编辑器.跟typora一样,实时渲染,格式并不是markdown的,但是可以导出为markdown格式. Please enable JavaScript to view the comments powered by Disqus. "],
["rmarkdown.html", "Chapter 2 Rmarkdown 2.1 安装 2.2 Rmarkdown结构 2.3 YAML 2.4 R代码块 2.5 代码块参数 (Chunk options) 2.6 全局代码块参数 2.7 具体问题的cookbook 2.8 Rmarkdown特有语法 2.9 输出格式", " Chapter 2 Rmarkdown Rmarkdown是Rstudio公司出品的.所有markdown的语法都支持.但是加入了很多强大的功能,因此可以做更多原生markdown无法完成的任务.成为数据分析以及报告自动化和重复化领域一个非常常用的工具. 可以参考下面的书,是rmarkdown的作者Yihui Xie写的. https://bookdown.org/yihui/rmarkdown/installation.html 也可以查看这个视频简介. What is R Markdown? from RStudio, Inc. on Vimeo. 2.1 安装 需要安装R和Rstudio. install.packages(&#39;rmarkdown&#39;) 如果想要转换为PDF格式,需要安装LaTex. install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() # install TinyTeX 2.2 Rmarkdown结构 Rmarkdown可以分为三部分,分别是YAML, 文本部分以及代码块. YAML YAML在每个rmakdown文件的最开头,定义了Markdown文件的很多性质.YAML是指YAin’t Markup Language, https://en.wikipedia.org/wiki/YAML. --- title: &quot;Hello R Markdown&quot; author: &quot;Awesome Me&quot; date: &quot;2018-02-14&quot; output: html_document --- YAML用---包围起来. 文本部分 YAML下面就是文本部分,其实也就是Markdown. 代码块 在Rmarkdown中,可以插入可以执行的代码块,不近包括R,还包括pyton,SQL等等. 上图显示的就是一个完整的Rmarkdown文件. 2.3 YAML YAML是在Rmakdown中控制很多内容的部分.通过参数设置,可以控制比如输入格式,输出主题等等. 2.4 R代码块 R代码块的格式为: ```{r} library(tidyverse) library(ggplot2) ``` 可以看到,跟markdown代码块唯一的不同就是需要使用{r}来定义该代码块为R语言.除此之外,可以通过在大括号中设置一系列的参数,来控制代码块的输出.包括文本输出,图片输出以及表格输出等. 比如,可以通过设置result = 'hide'从而使文本结果不输出.也可以通过设置fig.width和fig.height来控制输出图片的宽度和高度. 另外还可以通过eval参数(evaulate)来控制代码块是否执行,如果设置为FALSE,则代码块不会执行. 比如: 下面这段代码就会执行,并输出结果. ```{r, eval = TRUE} library(ggplot2) ggplot(mtcars, aes(x = mpg, y = wt, color = gear)) + geom_point() + theme_bw() ``` 而这段代码则不会执行 ```{r, eval = FALSE} library(ggplot2) ggplot(mtcars, aes(x = mpg, y = wt, color = gear)) + geom_point() + theme_bw() ``` 2.5 代码块参数 (Chunk options) 代码块有非常多的参数(chunk options),常用的总结如下,完整的可以在yihui xie的博客中. https://yihui.org/knitr/options/ 2.5.1 代码是否执行 eval:设置为TRUE或者FALSE来控制代码块是否执行. ###文本输出结果 echo:设置为TRUE或者FALSE,控制代码块是否显示在最终的渲染结果中. results: markup:mark up the results using the output hook, e.g. put results in a special LaTeX environment. asis:将R原始结果输出到最终文本中. hide:隐藏R执行结果,但是对error,message和warning没有作用. collapse:设置为TRUE或者FALSE.用来控制文本输出结果是否和代码块混在一起. warning:设置为TRUE或者FALSE.如果代码执行,是否显示其中的warning信息. error:设置为TRUE或者FALSE.如果设置为TRUE,即使代码执行出现错误,仍然会输出渲染结果,如果设置为FALSE,代码执行错误,则渲染也会出错,不会在继续输出结果. ‘message’: 设置为TRUE或者FALSE.代码执行时是否输出message信息. include:是否将代码输出结果显示在最终的渲染输出文本中. 显示代码和输出结果: ```{r, eval = TRUE, include = TRUE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() 显示代码不显示输出结果: ```{r, eval = TRUE, include = FALSE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` strip.white:设置为TRUE或者FALSE.是否输出在最终输出渲染结果中代码块上下的白线. ```{r, eval = FALSE, strip.white = TRUE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` ```{r, eval = FALSE, strip.white = FALSE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` 2.5.2 代码控制 (code decoration) tidy: TRUE:使用formatR对代码格式进行整理. FALSE:保持原格式. styler:使用styler包对代码格式进行整理. comment:默认为##,表示对于R代码输出的文本结果前面会有##进行注释. highlight:逻辑值.是否对代码进行高亮. ```{r, eval = FALSE, highlight = TRUE} library(ggplot2) library(tidyverse) mtcars %&gt;% ggplot(aes(x = gear, cyl)) + geom_point() + theme_bw() ``` 2.5.3 缓冲 (cache) cache:逻辑值.是否需要缓冲代码块运行结果,对于代码运行时间比较长的rmakdown文件,可以设置为TRUE,这样重新渲染的时候,会减少运行时间. cache.path:默认为’cache/’,设置如果缓冲为TRUE时,缓冲结果存储的文件夹位置. 2.5.4 图像控制(plot) fig.path:默认为’figure/’,用来设置生成figure的存储位置. fig.show:如何显示plot. asis: plot在产生他们的代码后面. hold:所有代码产生的图片都放在一个完整的代码块之后. animate: 将所有产生的图片合成一个动画图片. hide:产生所有图片,但是并不展示. ```{r, eval = TRUE, fig.show = &#39;asis&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ``` ```{r, eval = TRUE, fig.show = &#39;hold&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ``` ```{r, eval = TRUE, fig.show = &#39;animate&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() #plot3 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_igv() + theme_bw() ``` dpi:输出图片dpi,默认72.(dpi * inches = pixels) fig.width和fig.height:输出图片宽度和高度,默认为7(单位英寸). fig.asp:图片的高宽比.默认为NULL.如果设置为数值,比如设置为0.7.则fig.height会被覆盖,然后设置为fig.width*fig.asp. out.width和out.height:默认为NULL.可以设置为100%,这样在最终的渲染结果中就是和页面宽度一致. fig.align:图片的align位置.默认为left,可以为right或者center. fig.cap:图片标题.设置为NA或者NULL,则没有. fig.subcap:图片副标题. 2.6 全局代码块参数 如果某些代码块参数在全局中都是一样的,可以在全局进行设置. 在YAML下以及所有的markdown文本之上,插入下列代码块. ```{r, include = FALSE} knitr::opts_chunk$set(fig.width = 8, collapse = TRUE) ``` 使用的是knitr包中的opts_chunk$set()函数.可以将比较常见常用的代码块设置在这里进行设置.这里就是全局的设置. 2.7 具体问题的cookbook 输出两幅图,并且并列排布 结合代码块参数fig.show(设置为hold)和out.width(设置为50%). ```{r, eval = TRUE, fig.show = &#39;hold&#39;, out.width = &#39;50%&#39;} library(ggplot2) library(tidyverse) library(ggsci) #plot1 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_aaas() + theme_bw() #plot2 mtcars %&gt;% ggplot(aes(x = mpg, y = disp, color = as.character(gear))) + geom_point() + ggsci::scale_color_ucscgb() + theme_bw() ``` 2.8 Rmarkdown特有语法 Rmarkdown相比markdown来说,因为可以直接运行代码,因此有一些特有的语法,比如插入图片等. 2.8.1 图片 (image) 使用knitr::include_graphics()函数可以直接插入图片,然后使用代码块参数可以对图片进行设置,宽度高度,对齐等等. ```{r, eval = TRUE, fig.show = &#39;hold&#39;, out.width = &#39;50%&#39;, fig.align = &#39;center&#39;, fig.cap = &quot;小涛&quot;} knitr::include_graphics(&#39;images/Screen Shot 2020-03-13 at 10.48.36 PM.png&#39;) ``` Figure 2.1: 小涛 2.8.2 表格 (Table) knitr::ktable()函数 ```{r, eval = TRUE} knitr::kable(iris[1:5, ], caption = &#39;A caption&#39;) ``` Table 2.1: A caption Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 该函数又很多参数可以用来控制输出表格的格式,具体的可以参考帮助文档.也可以参考下面的帖子: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html 2.8.3 地图 (map) 使用leaflet包可以插入地图. ```{r out.width=&#39;100%&#39;, echo=FALSE} library(leaflet) leaflet() %&gt;% addTiles() %&gt;% setView(-93.65, 42.0285, zoom = 17) %&gt;% addPopups( -93.65, 42.0285, &#39;Here is the &lt;b&gt;Department of Statistics&lt;/b&gt;, ISU&#39; ) ``` 2.9 输出格式 2.9.1 HTML格式 Markdown最最开始就是就是为输出为HTML格式涉及的.在Rmarkdown中,如果想要输出位HTML格式,需要在YAML中将output设置为html_document即可. --- title: Test author: Xiaotao Shen date: March 22, 2005 output: html_document --- 目录(Table of contents) 想要给文章设置目录,可以在html_document下设置toc参数,同时也可以设置toc_depth来设置几级目录. 比如下面的例子: --- title: &quot;Habits&quot; output: html_document: toc: true toc_depth: 2 --- 如果想要让目录浮在页面上,可以设置toc_float参数.比如下面的例子: --- title: &quot;Habits&quot; output: html_document: toc: true toc_float: true --- 同时toc_float参数还有自己的参数可以进行设置. collapsed:逻辑值.控制目录是否可以进行折叠. smooth_scroll:逻辑值.controls whether page scrolls are animated when TOC items are navigated to via mouse clicks. 例如: --- title: &quot;Habits&quot; output: html_document: toc: true toc_float: collapsed: false smooth_scroll: false --- 标题编号(Section numbering) 可以使用number_sections参数来控制标题的编号. 例如: --- title: &quot;Habits&quot; output: html_document: toc: true number_sections: true --- 外观和风格 有几个参数可以来控制HTML document的外观. theme参数可以用来控制HTML document的外观和主题.来自于Bootswatch.可以选择的主题包括以下几项: default, cerulean, journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, and yeti.可以点击到网站中去查看几种主题的外观. highlight用来控制语法高亮的风格.包括以下几种: default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, and textmate. 表格打印 可以使用df_print参数来控制表格打印的风格.在R代码块中的数据框直接显示的风格. default: 使用R中print.data.frame方法. kable: 使用knitr::kable函数. tibble: 使用tibble::print.tbl_df函数, paged:使用rmarkdown::paged_table函数. --- title: &quot;Motor Trend Car Road Tests&quot; output: html_document: df_print: default --- ```{r} mtcars ``` 显示结果如下: 如果设置为kable: 如果设置为paged: 代码折叠 可以通过设置code_folding为hide,这样所有的代码默认都是折叠的,然后用户可以通过点击按钮显示某个代码块. --- title: &quot;Habits&quot; output: html_document: code_folding: hide --- 其他一些高级设置 通过使用includes参数,可以在rmarkdown的某些位置加入一些自己设计好的HTML元素. --- title: &quot;Habits&quot; output: html_document: includes: in_header: header.html before_body: doc_prefix.html after_body: doc_suffix.html --- 自定义主题 如果对HTML比较熟悉,可以使用自己的主题. --- title: &quot;Habits&quot; output: html_document: template: quarterly_report.html --- 2.9.2 PDF格式 Rmarkdown也可以输出为PDF格式的文档.设置output为pdf_document. --- title: &quot;Habits&quot; output: pdf_document: highlight: tango --- PDF格式的目录,图片设置,数据框打印,语法高亮都跟HTML相同. 2.9.3 Word格式 也可以输出为word格式,设置output为word_document. --- title: &quot;Habits&quot; author: John Doe date: March 22, 2005 output: word_document --- word的格式可以使用默认的格式,当然也可以自己进行设置.设置好格式之后,使用reference_docx参数进行设置. --- title: &quot;Habits&quot; output: word_document: reference_docx: my-styles.docx --- 如何设置格式文件,可以参考下面文章: https://rmarkdown.rstudio.com/articles_docx.html 或者看下面的视频: Create A MS Word Template for R Markdown from Yihui Xie on Vimeo. "],
["rmarkdown-beyond.html", "Chapter 3 Rmarkdown拓展 3.1 Blogdown 3.2 Bookdown 3.3 Presentation 3.4 Pagedown 3.5 Pkgdown", " Chapter 3 Rmarkdown拓展 Yihui Xie以及Rstudio基于Rmarkdown写了好几个用来创建网站等的包. 3.1 Blogdown 使用基于Rmarkdown的包blogdown可以很方便的创建网站.比如一个个人网站.关于详细的blogdown,可以参考下面的网址: https://bookdown.org/yihui/blogdown/ 3.1.1 需要准备的东西 Rstudio和R 一个github账户 3.1.2 安装 安装blogdown包.在R中. ## Install from CRAN install.packages(&#39;blogdown&#39;) blogdown是基于Hugo的,所以需要安装Hugo. blogdown::install_hugo() 3.1.3 创建项目 推荐使用这个主题:gcushen/hugo-academic 也可以使用下面的代码: blogdown::new_site(theme = &#39;gcushen/hugo-academic&#39;) 3.1.4 预览 项目建好之后,就会有一个demo的网站在.输入代码预览网站: blogdown:::serve_site() 3.1.5 使用Rstudio IDE来管理网站 Rstudio的Addins中有很多的功能可以方便的用来管理网站.当然他们也都有对应的命令行工具. Serve Site:对应着blogdown::serve_site().用来对网站进行build,并进行预览. New Post:对应着blogdown::new_post(),用来添加新的post. 其他的功能直接可以打开看看, 3.1.6 更改为其他的主题 Hugo有很多主题,都是别人已经做好的,可以直接使用. 官网如下: https://themes.gohugo.io/ 找到自己喜欢以及合适的主题之后,找到该主题所在的github用户名和repo名字,然后使用下面的代码进行安装: blogdown::install_theme(&#39;user.name/repo.name&#39;) 比如我们使用下面的主题: https://github.com/kakawait/hugo-tranquilpeak-theme 最好的办法其实是直接新建一个网站,然后使用那个主题,因为不同的主题的配置等等都是非常不同的. 3.1.7 发布自己的网站 在本地创建好自己的网站之后,下面需要做的就是将自己的网站发布在网上,使别人可以通过url看到自己的网站. 推荐将网站所有内容托管在github上,然后发布在netlify上. 打开netlify网站(https://www.netlify.com/),可以直接使用github账号登陆. 生成发布文件 输入下列代码: blogdown::hugo_build() 得到下面结果: 然后在目录下有public文件夹,说明已经准备好. 登陆netlify网站 登陆netlify网站,可以使用github账号登陆. 然后将public文件夹直接拖动到提示区域即可. 然后就会自动发布(deployment). 这时候他会自动给一个网址(url),比如https://quirky-austin-f482bf.netlify.com/. 绑定github自动发布 每次更新之后,我们都需要将public文件夹手动拖动到netlify中,有些麻烦.可以将我们的网站托管在github上,然后将github repo和netlify绑定,从而在每次更新并同步到github之后,让netlify自动更新发布. 首先在github上创建和本地仓库同名的远程仓库. 然后参考git部分的内容,先创建远程仓库并提交,在terminal中: git config user.name git config user.email git init git add . git commit -m &#39;new website&#39; 然后推送到远程仓库: remote add origin git@github_shenxt:shenxt/ds4omics git remote -v git push -u origin master#第一次推送 这时候可以看到,本地仓库内容已经被推送到远程仓库了. 设置netlify: 在netlify,点击Site Setting -&gt; Build&amp;deploy -&gt; Link site to git 然后按照提示一步步进行即可. 另外,需要设置下面内容: hugo版本可以在R中观察. blogdown::hugo_version() 这样,以后再进行改动,然后使用git将其推送到github,netlify就会自动同步并发布. 设置自定义域名 我们可能需要设置自己的域名. 如果没有买域名,那就只能使用netlify而二级域名,二级域名可以进行设置. 在site sitting-&gt;site information中,点击change site name,就可以设置自己的二级域名.比如我们这里改成ds4omics.netlify.com. 如果我们购买了自己的域名,可以在goDaddy购买. 然后也可以设置为自己的域名. 在netlify主页上,点击Set up a custom domain.然后填入自己购买的域名,比如shenxt.me,然后按照提示一步步进行即可. 3.1.8 发布到github上 也可以将网站发布到github pages上. 具体可以参考https://bookdown.org/yihui/blogdown/github-pages.html. 下图是我自己的个人博客,也是使用blogdown建立的. 3.2 Bookdown 3.3 Presentation 3.4 Pagedown 3.5 Pkgdown "],
["git.html", "Chapter 4 Git和github 4.1 安装git 4.2 注册github账户 4.3 Git基础知识 4.4 Git配制 4.5 Git基本操作 4.6 git的分支管理 4.7 远程仓库(GitHub) 4.8 设置忽略文件 4.9 多人协作", " Chapter 4 Git和github git是版本控制系统,而github是开源代码托管平台,提供的是基于git的开源代码托管服务.对于一个团队来说,即使没有github,也可以通过自己搭建git服务器来进行代码的管理,甚至还有一些其他的基于git的代码托管平台使用,比如gitlab,gitee(码云)等. 4.1 安装git Mac和Linux是默认安装git的,打开terminal,输入git version,如果输出git版本号,则说明已有git. windows安装git可以直接到官网下载,然后安装即可.官网如下: https://git-scm.com/downloads 安装结束之后,在开始菜单如果有git bash,则说明安装成功. 4.2 注册github账户 打开github官网注册界面 https://github.com/join?source=header-home 填入自己的账户名,邮箱和密码. 选择free plan即可. 选择或者填写一些内容. 验证邮箱 4.3 Git基础知识 git是Linux的作者写的.是一个分布式的版本控制软件. 主要功能: 备份代码. 版本管理. 协作办公. git的基本概念: 工作区(work directory):简单来说就是你的电脑里的目录,也就是某个本地文件夹. 仓库(Respository):工作区有一个隐藏目录.git,这个不算是工作区,而是git的仓库,也称之为版本库,这里存储的就是所有代码的版本. 暂存区(stage或者index):git的仓库中存放了很多东西,其中最为重要的就是暂存区. 远程仓库(remote directory):本地仓库的东西如果需要托管到github上,就需要在github上创建一个仓库(远程仓库),然后将本地仓库和远程仓库联系起来,这样就可以将本地仓库的内容推送到远程仓库. 4.4 Git配制 4.4.1 安装git之后,需要进行一些全局设置,比如用户名邮箱. 主要,下面的所有操作,命令,max和linux’是在终端(terminal)中进行的,在windows中,是在git bash中. 设置的主要命令是git config: git config --global user.name &quot;your name&quot; git config --global user.email &quot;your email&quot; 其中,--global是指全局配置,如果不写(或者写为local),则只为当前仓库(repository)配置. 如果有多个git用户,这时候需要先确定某个仓库使用的哪个账户. git config user.name git config user.email 查询全局的git账户信息: git config --global user.name git config --global user.email 如果想要去掉全局用户和邮箱设置. git config --global --unset user_name git config --global --unset user_email 4.4.2 生成秘钥 ssh-keygen -t rsa -C &quot;shenxt1990@163.com&quot; 然后会在~/.ssh/文件夹中会产生秘钥文件,我们只需要将公钥(pub后缀)的内容拷贝到github中即可. 4.5 Git基本操作 4.5.1 创建本地git仓库(reop) 使用git init命令 首先,创建一个你要当作仓库的文件夹,然后将其设置为工作路径,然后执行. mkdir git_test#创建本地文件夹 cd git_test#进入到该文件夹将其作为工作目录 git init#创建本地git仓库 这时候查看目录结构,就可以看到创建了一个名为.git的子目录,这就说明创建版本库成功了. ls -la 4.5.2 将文件添加到版本库 要将一个文件纳入到版本管理,首先需要将其添加到暂存区(stage),然后才能提交到仓库中. 使用git add命令将文件添加到暂存区: 比如我们首先新建一个名为README.md的文件,然后将其添加到暂存区. touch README.md#创建文件 git add README.md#将该文件加入到暂存区 当然也可以使用下面命令将所有修改添加到暂存区: git add . . 是正则表达式,代表任意文件.但是空文件夹是不会添加到暂存区的. 使用git commit命令将暂存区文件提交到仓库中. git commit #如果暂存区有文件,则将其中的文件提交到仓库 git commit -m &quot;your note for this commit&quot; #用于注明提交的内容,变更等信息,方便溯源 如果直接使用git commit提交,不带注释信息,则会先弹出评论界面,需要评论. 注意这时候是使用vi打开的文件,所以需要掌握一点vi的基础知识.参考下面帖子: https://www.cnblogs.com/itech/archive/2009/04/17/1438439.html 简单来说,首先在命令行模式下按下字母i进入插入模式,在该模式下进行信息的输入.输入结束之后,点击ESC退回到命令行模式,然后再输入冒号(:).输入wq,保存文件修改退出vi编辑器. 4.5.3 查看仓库状态 不论我们是新建了文件,将文件加入暂存区,或者是其他修改等,我们都可以使用git status来查看当前的仓库状态. 如果当前没有任何变动. 如果我们新建了一个文件,然后再次查看状态: 因为我们还没有将其添加到暂存区,因此显示该新建文件为 Untracted files 将文件放入暂存区,然后再查看状态: 然后再将其进行提交,查看状态. 4.5.4 查看仓库中的具体修改 如果做过之后修改,我们忘了做了哪些修改,可以使用git diff命令来查看具体修改内容. git diff #查看所有改动 git diff README.md #查看具体文件的改动 比如我们在test.txt文件中加入一行,然后查看: git diff test.txt 可以看到记录了对该文件的修改内容. 注意,如果你修改之后已经将其存入暂存区,则git diff不会再显示内容. 4.5.5 查看提交的历史记录 有的时候,你需要查看自己做过哪些提交(commit),来回顾自己的完成部分,这时候需要使用git log命令. git log #显示所有提交的历史记录 git log --pretty=oneline #单行显示提交历史记录的内容 可以看到我们现在一共进行了4次提交,每次提交的第一行commit之后是该次提交的唯一ID.然后后面显示提交者,时间以及一些记录等. 如果提交非常多,需要显示内容精简一些,就需要使用git log --pretty=oneline命令. 4.5.6 版本回退 有了git log来查看提交的历史记录,我们就可以通过git reset --hard来退回到我们需要的某个特定版本. git reset --hard HEAD^ # 回退到上一个提交版本 git reset --hard HEAD^^ # 回退到上上一个提交版本 git reset --hard &#39;commit_id&#39; # 会退到 commit_id 指定的提交版本 使用git log我们可以看到每个提交都有一个唯一的commit ID,其中上一个也可以使用HEAD代表.因此我们可以退回到上一个版本.比如,我们在最近的一次提交中修改了test.txt,在其中加入一行. 我们想退回到上一个版本,不想加入这一行,可以使用下面命令. git reset --hard HEAD^ 这时候再查看log,可以看到最近的一个commit已经消失,回到了上一个提交.而上一次的修改也已经消失. 4.5.7 回到未来某个版本 退回到原来某个版本之后,如何再回到未来某个版本呢?还是使用git reset --hard命令,但是此时使用git log命令是无法显示在这之后的提交信息的。但是，通过git reflog可以获取到操作命令的历史。 这时候只要在使用git reset命令就可以回到未来的任意一个版本了.而且这时候再使用git log也回到了最初的版本提交记录. 4.5.8 撤销修改 撤销修改同样包括两方面的内容，由于仓库中的文件在提交(commit)之前，可能在工作区中(也就是还未运行git add命令)，尚未在版本控制范围内，也可能在暂存区中(也就是运行了git add命令但是没有运行git commit命令)。 4.5.8.1 丢弃工作区中的文件修改 使用如下命令. git checkout -- README.md #如果 README.md 文件在工作区，则丢弃其修改 git checkout -- . #丢弃当前目录下所有工作区中文件的修改 比如我们再test.txt中添加另外一行,然后不加入暂存区,然后将其丢弃掉. 然后运行: git checkout -- test.txt 4.5.8.2 丢弃暂存区的修改 如果已经运行了git add将修改放入了暂存区,可以通过下列命令进行丢弃: git reset HEAD README.md #将 README.md 恢复到 HEAD 提交版本的状态 git checkout -- README.md 然后将其删除掉. 4.5.9 删除文件 在文件未添加到暂存区之前,对想删除文件可以直接物理删除.或者通过git checkout -- file来丢弃.如果文件已经被提交,则需要git rm来删除. git rm Readme.md #删除已经提交(commit)过的文件 注意: git rm只能删除已经提交到版本库中的文件.其他状态的文件直接用这个命令操作是出错的. 4.6 git的分支管理 分支管理是版本管理中的重要概念.在进行多个并行作业时,我们经常会用到分支.在这类并行开发的过程中,往往同时存在着多个最新的代码状态. master分支时git默认创建的分支.因此基本上所有的开发都是以这个分支为中心进行的. 在不同分支中,可以同时进行不同的作业,等该分支的作业完成之后,再与master分支进行合并. 比如下图中,我们首先以master作为模板复制得到feature A的分支.feature A分支主要用来开发另外一个新的特性,等开发完毕之后,再将其合并到master分支中即可. 4.6.1 查看分支 使用git branch命令查看分支信息. git branch #查看本地分支信息 git branch -v #查看相对详细的本地分支信息 git branch -av #查看包括远程仓库在内的分支信息 可以看到我们现在只有一个分支,也就是master,然后星号标识的就是当前所在的分支. 4.6.2 创建分支 使用 git branch new.name用来创建新的分支. git branch development ##创建一个新的名字叫做development的分支 需要注意的是,在哪个分支下面新建分支,则该分支就是copy自当前所在的分支. 4.6.3 切换分支 使用git checkout命令来切换分支.比如我们先新建一个development的分支,然后切换到该分支下. git branch development git checkout development 当然也可以使用下面命令直接创建并切换到新建的分支下. git checkout -b development 4.6.4 switch命令 我们注意到切换分支使用git checkout &lt;branch&gt;,而前面讲过的撤销修改则是git checkout -- &lt;file&gt;,同一个命令,有两种作用,确实有点令人迷惑. 实际上,切换分支这个动作,用switch更科学。因此，最新版本的Git提供了新的git switch命令来切换分支： 创建并切换到新的development分支,可以使用: git switch -c development 直接切换到已有分支: git switch master 我们下面在development分支下面再新建一个development.txt文件,然后写入一些内容. 可以看到此时有一个新建的development.txt文件.如果我们切换到master分支,还是有该文件,但是对该文件内容进行修改,则因为没有加入到暂存区,因此并不会进行版本控制. 4.6.5 合并分支(merge) 当我们修复完成一个Bug,或者开发完成一个新特性,我们就会把相关的Bug或者特性的上修改合并回原来的主分支上,这时候就需要git merge命令来做分支的合并. 首先需要切换回最终需要合并的分支,也就是master分支,然后再合并. git checkout master #切换回master分支 git merge development #将development分支中的修改合并回master分支 4.6.6 删除分支 当之前创建的分支,完成了它的使命,如Bug修复完,分支合并以后,这个分支就不在需要了,就可以删除它. git branch -d development #删除development分支 如果分支没有合并到master分支中,直接使用上面命令会报错,可以使用下面的命令强制删除. git branch -D development 4.6.7 分支提交冲突 如果新创建了一个分支develpment,然后在该分支下对readme.txt进行修改,然后提交. 随后然后切换到master分支,然后也对readme.txt进行修改,然后也提交. 这样,两个分支分别有了不同的提交.这种情况下,再进行合并就会有冲突. 我们合并一下试试: ![](images/Screen Shot 2020-03-11 at 9.20.30 PM.png) 可以看到报错,Git告诉我们,readme.txt文件存在冲突,必须手动解决冲突后再提交.git status也可以告诉我们冲突的文件: git status 这时候我们可以使用vi或者其他工具打开冲突的文件,在这就是readme.txt: Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存： 我们将这些记号删除,然后保留自己想要保留的修改就可.然后重新提交. git add . git commit-m &#39;remove conflict&#39; 这时候就完成了合并.可以删除development分支了. 这时候使用git log也可以看到分支的提交情况.使用git log --graph可以观察分支合并图. 4.6.8 分支策略 在实际开发中，我们应该按照几个基本原则进行分支管理： 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活； 那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本； 你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。 4.7 远程仓库(GitHub) 上面的所有命令都是针对本地仓库的操作.当我们希望多个人来协作时,会将代码发布到一个统一的远程仓库,然后多个人在本地操作以后,再推送到远程仓库.其他人协作时,需要先同步远程仓库的内容,再推送自己的修改.这就要用到了我们最常用的github. 4.7.1 添加到远程仓库 比如我们上面所建立的git_test本地仓库,我们需要将其添加到github的远程仓库中. git remote add origin your_remote_git_repo #为本地仓库添加远程仓库 其中your_remote_git_repo是在github中创建的.我们先创建一下,然后进行尝试. 格式为git@github.com:user.name/repo_name. 当然,也可以直接使用远程仓库的网址: https://github.com/jaspershen/git_test 4.7.2 推送到远程仓库 使用git push将本地仓库的内容推送到远程仓库. git push -u origin master #第一次推送时使用,可以简化后面的推送或者拉取命令使用 git push origin master #将本地master分支推送到origin远程分支,后面之后就可以直接使用该命令推送 以后再推送的时候,就使用git push就可以了. 这时候可以看到github中已经有了内容. 4.7.3 从远程仓库获取最新内容 在多人协作过程中,当自己完成了本地仓库中的提交,想要向远程仓库推送前,需要先获取到远程仓库的最新内容。 可以通过git fetch和git pull来获取远程仓库的内容. git fetch origin master git pull origin master 两者之间的区别: git fetch是仅仅获取远程仓库的更新内容,并不会自动做合并. git pull在获取远程仓库的内容后,会自动做合并,可以看成git fetch之后git merge.所以更推荐这个命令. 4.7.4 查看远程仓库信息 git remote -v 4.7.5 从远程仓库克隆 如果你本地没有仓库,希望从已有的远程仓库上复制一份代码,那么你需要git clone. git clone https://github.com/jaspershen/git_test #通过 https 协议,克隆Github上git仓库的源码 git clone jaspershen@github.com/git/git_test #通过ssh协议,克隆Github上git仓库的源码 4.8 设置忽略文件 有时候仓库中的某些文件或者文件夹并不需要进行同步,这时候可以通过设置忽略文件.gitignore进行管理. 参考帖子: https://github.com/onlynight/ReadmeDemo/tree/master/Readmes/GitIgnore 4.9 多人协作 4.9.1 创建远程仓库 在github创建远程仓库或者将本地仓库推送到远程仓库.这里就不在演示了. 4.9.2 本地创建分支并推送到远程仓库 比如我们在shenxt账户上有一个远程仓库,创建一个jaspershen分支. git branch jaspershen 然后将该分支推送到远程仓库. git push origin jaspershen 这时候再去远程仓库就可以看到jaspershen分支了. 4.9.3 邀请合作者 在github远程仓库的setting中,点击Manage access,然后点击invite collarbortor,填入邀请人的ID即可.这时候邀请人可以在自己github中看到邀请,同意即可. 4.9.4 合作者参与项目 合作者同意邀请之后,需要克隆项目,创建本地分支. 4.9.5 克隆项目 git clone git@github_jaspershen:shenxt/github_test4.git cd github_test4 这时候查看分支, git branch 会看到只有master分支.所以要创建远程仓库的分支到本地. git checkout -b jaspershen origin/jaspershen 这时候再查看分支,就会在jaspershen分支了.这时候合作者jaspershen就可以在该分支下进行工作了. 4.9.6 开始工作 这时候合作者jaspershen可以在分支下正常工作,然后提交,合并,并推送到远程仓库. 创建文件 touch heloworld.txt 然后在该文件下写入一行文字: test from jaspershen 提交 然后加入到暂存区并提交. git add helloworld.txt git commit -m &quot;test from jaspershen&quot; 合并分支 git checkout master git merge jaspershen 推送到远程仓库 然后可以将其推送到远程分支(包括master和jaspershen分支).注意是直接推送到shenxt账户的远程仓库. git push origin master git push origin jaspershen 这时候就可以在shenxt的远程仓库下看到jaspershen的提交工作了. 4.9.7 有冲突怎么办 多人协作是不免会有冲突,冲突的主要原因就是对同一文件的修改,所以最好是提前说好不要对同一个文件进行修改,如果有冲突,请参考: https://www.liaoxuefeng.com/wiki/896043488029600/900004111093344 4.9.8 抓取分支 多人协作时，大家都会往master分支上推送各自的修改。如果两个人同时对同一个文件进行了修改,并且同试图推送到master分支,那么就会冲突,报错.这时候,应该先使用git pull命令将最新的提交从origin/master下抓取下来,然后本地合并,解决冲突,再推送. 比如我们在shenxt账户下也创建一个helloworld.txt文件.然后提交,推送到远程仓库. git push origin master 会得到下面的报错: ! [rejected] master -&gt; master (fetch first) error: failed to push some refs to &#39;git@github_shenxt:shenxt/github_test4.git&#39; hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref. You may want to first integrate the remote changes hint: (e.g., &#39;git pull ...&#39;) before pushing again. hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details. 我们先使用git pull抓取分支的最新提交. git pull 也失败了,因为没有指定本地分支与远程origin/xxx分支的链接，根据提示，设置本地分支和远程分支的链接： git branch --set-upstream-to=origin/master master git branch --set-upstream-to=origin/jaspershen jaspershen 然后在pull. 这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push： 4.9.9 多人协作的工作模式 首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！ 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。 这就是多人协作的工作模式，一旦熟悉了，就非常简单。 Please enable JavaScript to view the comments powered by Disqus. "],
["ggplot2.html", "Chapter 5 ggplot2 5.1 安装", " Chapter 5 ggplot2 5.1 安装 install.packages(&quot;ggplot2&quot;) Please enable JavaScript to view the comments powered by Disqus. "],
["network.html", "Chapter 6 Network分析总结 6.1 Example one 6.2 Example two", " Chapter 6 Network分析总结 Some significant applications are demonstrated in this chapter. 6.1 Example one 6.2 Example two Please enable JavaScript to view the comments powered by Disqus. "],
["multiomics.html", "Chapter 7 多组学分析", " Chapter 7 多组学分析 We have finished a nice book. Please enable JavaScript to view the comments powered by Disqus. "],
["regularexpression.html", "Chapter 8 正则表达式 8.1 特殊字符 8.2 匹配(match) 8.3 替换 (Alternates) 8.4 锚点(anchors) 8.5 数量(Quantifiers) 8.6 整体匹配 (groups) 8.7 反义", " Chapter 8 正则表达式 正则表达式(regular expression)是文本处理中经常用到的方法.正则表达式描述了一种字符串匹配的模式（pattern）.在R中,正则表达式跟其他语言基本一致,要写成文本的格式,也就是需要使用双引号或者单引号括起来. 8.1 特殊字符 在正则表达式中有一些字符是有特殊含义的,比如点(.),如果只写点,它代表任意字符,这些称之为特殊字符,或者元字符.正则表达式中就有很多这样元字符.总结如下: 正则表达式 含义 . 任意字符 ^ 匹配字符的开始位置 $ 匹配字符的结束位置 () 括号中的内容作为一个整体进行匹配 * 重复其前面字符,零次或者多次 + 重复其前面字符,一次或者多次 ? 重复其前面字符,零次或者一次 [] 括号中的字符表示任意一个 这里面有很多是和后面的内容重复的,因此这里写的比较简略. 如果想要匹配特殊字符,那么需要对其进行转义,这时候就用到了转义符,也就是\\.但是因为转义符本身也是特殊字符,所以它本身还需要一个转义符,就是\\\\.因此比如我们想要匹配点本身,那在pattern中,需要写作\\\\.. 8.2 匹配(match) 有一些特殊含义的匹配,在正则表达式有固定表达方式,比如任意一个数字,任意字母等. 正则表达式 含义 \\\\. 匹配点. \\\\n 匹配换行符 \\\\t 匹配tab \\\\s 匹配空格(white space) \\\\d 匹配任意数字 \\\\w 匹配任意字符 \\\\b 匹配所有字符的边界 [:digit:] 任意数字 [:alpha:] 任意字母 [:lower:] 任意小写字母 [:upper:] 任意大写字母 [:alnum:] 任意数字和字母 [:punct:] 任意标点符号 [:graph:] 任意数字字母或者标点符号 [:space:] 空格 [:blank:] 空格和tab,但是不包括新行 8.3 替换 (Alternates) 正则表达式 含义 a|b 或者,a或者b [abc] abc中的任意一个 [^abc] 除abc之外的任意字符 [a-c] range,abc 8.4 锚点(anchors) 锚点,又称为定位符,能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。 8.4.1 以固定要求开头 以固定要求开头的正则表达式是^,比如我们要查找那些以字母a开头的字符串,就可以写作: &#39;^a&#39; 在R语言中: grep(pattern = &quot;^a&quot;, x = c(&quot;abc&quot;, &quot;bcd&quot;, &quot;cde&quot;, &quot;ade&quot;)) ## [1] 1 4 8.4.2 以固定要求结尾 以固定要求结尾的正则表达式是$,比如我们要查找那些以字母a结尾的字符串,就可以写作: &#39;a$&#39; 在R语言中: grep(pattern = &quot;a$&quot;, x = c(&quot;abc&quot;, &quot;bcd&quot;, &quot;cde&quot;, &quot;ada&quot;)) ## [1] 4 8.5 数量(Quantifiers) 正则表达式中经常需要有一些表达数量的内容,比如重复1次,重复多于一次等等.一般是使用一些特殊字符在某个要重复的内容之后.称之为限定符: 正则表达式 含义 ? 重复0次或者一次 * 0次或者多次 + 1次或者多次 {n} 正好n次 {n,} n次或者多于n次 {n,m} 大于等于n次小于等于m次 重复或者数量还涉及到贪婪和懒惰的问题: 正则表达式 含义 *? 重复任意次,但尽可能少重复 +? 重复一次或者更多次,但尽可能少重复 ?? 重复零次或者1次,但是尽可能少重复 {n,}? 重复n次及以上,但是尽可能少重复 {n,m} 重复n次到m次,但是尽可能少重复 8.6 整体匹配 (groups) 如果需要将某个对象最为整体进行匹配,一般是使用小括号将其括起来. 比如: (ab|d)e 小括号中就代表一个整体,也即是ab或者d然后后面带着e. 8.7 反义 有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义: 正则表达式 含义 \\W 匹配任意不是字母,数字,下划线和汉字的字符 \\S 匹配任意不是空白符的字符 \\D 匹配任意不是数字的字符 \\B 匹配不是单词开头或者结束的位置 [^x] 匹配除了x以外的任意字符 [^abc] 匹配除了abc以外的任意字符 Please enable JavaScript to view the comments powered by Disqus. "],
["tidyverse-stringr.html", "Chapter 9 Tidyverse用于数据分析stringr 9.1 安装 9.2 Rstudio Addin 9.3 Pattern matching", " Chapter 9 Tidyverse用于数据分析stringr stringr是R中进行文本处理的包.cheatsheet可以看这里. https://github.com/rstudio/cheatsheets/blob/master/strings.pdf 9.1 安装 # Install the released version from CRAN: install.packages(&quot;stringr&quot;) # Install the cutting edge development version from GitHub: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/stringr&quot;) 9.2 Rstudio Addin 使用Rstudio Addin,可以很方便的使用正则表达式. 需要安装一个包: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;gadenbuie/regexplain&quot;) 安装结束之后,可以在Addins中找到. 9.3 Pattern matching 9.3.1 计算一个文本中符合要求的数目 使用str_count()函数: 比如要统计某个单词中某个字母的个数: fruit &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;pineapple&quot;) str_count(fruit, &quot;a&quot;) ## [1] 1 3 1 1 str_count(fruit, c(&quot;a&quot;, &quot;b&quot;, &quot;p&quot;, &quot;p&quot;)) ## [1] 1 1 1 3 其中第二个参数pattern是支持正则表达式的. 9.3.2 判断一个文本中是否存在一个pattern 使用str_detect()函数. str_detect(string, pattern, negate = FALSE) 其中negate是在stringr中的很多函数都有的一个参数,如果设置为TRUE,就会返回没有match到的内容. fruit &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;pinapple&quot;) str_detect(fruit, &quot;a&quot;) ## [1] TRUE TRUE TRUE TRUE 9.3.3 从文本中提取pattern 有两个函数,str_extract和str_extract_all. 用法如下: str_extract(string, pattern) str_extract_all(string, pattern, simplify = FALSE) 从文本中提取符合要求的文本. 例子: shopping_list &lt;- c(&quot;apples x4&quot;, &quot;bag of flour&quot;, &quot;bag of sugar&quot;, &quot;milk x2&quot;) str_extract(shopping_list, &quot;\\\\d&quot;) ## [1] &quot;4&quot; NA NA &quot;2&quot; \\\\d是一种正则表达式的写法,代表任意数字.上面的代码代表我们想要从每个文本中提取所有的数字. 如果没有数字,那么就会返回NA. shopping_list &lt;- c(&quot;apples x4&quot;, &quot;bag of flour&quot;, &quot;bag of sugar&quot;, &quot;milk x2&quot;) str_extract(shopping_list, &quot;[a-z]+&quot;) ## [1] &quot;apples&quot; &quot;bag&quot; &quot;bag&quot; &quot;milk&quot; [a-z]+代表任意一个小写字母,然后重复1次或者多次. shopping_list &lt;- c(&quot;apples x4&quot;, &quot;bag of flour&quot;, &quot;bag of sugar&quot;, &quot;milk x2&quot;) str_extract(shopping_list, &quot;\\\\b[a-z]{1,4}\\\\b&quot;) ## [1] NA &quot;bag&quot; &quot;bag&quot; &quot;milk&quot; \\\\b代表字符的边界. \\\\b[a-z]{1,4}\\\\b代表一个字符的边界+重复1-4次的任意小写字母+一个字符的边界. 可以看到,只会提取出第一个字母. 如果想要把一个字符的所有符合要求的pattern都提取出来,可以使用str_extract_all. shopping_list &lt;- c(&quot;apples x4&quot;, &quot;bag of flour&quot;, &quot;bag of sugar&quot;, &quot;milk x2&quot;) str_extract_all(shopping_list, &quot;[a-z]+&quot;) ## [[1]] ## [1] &quot;apples&quot; &quot;x&quot; ## ## [[2]] ## [1] &quot;bag&quot; &quot;of&quot; &quot;flour&quot; ## ## [[3]] ## [1] &quot;bag&quot; &quot;of&quot; &quot;sugar&quot; ## ## [[4]] ## [1] &quot;milk&quot; &quot;x&quot; str_extract_all(shopping_list, &quot;\\\\b[a-z]+\\\\b&quot;) ## [[1]] ## [1] &quot;apples&quot; ## ## [[2]] ## [1] &quot;bag&quot; &quot;of&quot; &quot;flour&quot; ## ## [[3]] ## [1] &quot;bag&quot; &quot;of&quot; &quot;sugar&quot; ## ## [[4]] ## [1] &quot;milk&quot; str_extract_all(shopping_list, &quot;\\\\d&quot;) ## [[1]] ## [1] &quot;4&quot; ## ## [[2]] ## character(0) ## ## [[3]] ## character(0) ## ## [[4]] ## [1] &quot;2&quot; 可以看到,这时候得到的就是一个和string同样长度的list.会把每个string中的符合要求的pattern都提取出来. 我们注意到str_extract_all()有一个参数:simplify,它能够将返回的结果变为一个matrix: shopping_list &lt;- c(&quot;apples x4&quot;, &quot;bag of flour&quot;, &quot;bag of sugar&quot;, &quot;milk x2&quot;) str_extract_all(shopping_list, &quot;[a-z]+&quot;, simplify = TRUE) ## [,1] [,2] [,3] ## [1,] &quot;apples&quot; &quot;x&quot; &quot;&quot; ## [2,] &quot;bag&quot; &quot;of&quot; &quot;flour&quot; ## [3,] &quot;bag&quot; &quot;of&quot; &quot;sugar&quot; ## [4,] &quot;milk&quot; &quot;x&quot; &quot;&quot; str_extract_all(shopping_list, &quot;\\\\b[a-z]+\\\\b&quot;, simplify = TRUE) ## [,1] [,2] [,3] ## [1,] &quot;apples&quot; &quot;&quot; &quot;&quot; ## [2,] &quot;bag&quot; &quot;of&quot; &quot;flour&quot; ## [3,] &quot;bag&quot; &quot;of&quot; &quot;sugar&quot; ## [4,] &quot;milk&quot; &quot;&quot; &quot;&quot; str_extract_all(shopping_list, &quot;\\\\d&quot;, simplify = TRUE) ## [,1] ## [1,] &quot;4&quot; ## [2,] &quot;&quot; ## [3,] &quot;&quot; ## [4,] &quot;2&quot; 9.3.4 确定某个pattern在文本中的位置 两个函数: str_locate(string, pattern) str_locate_all(string, pattern) 例子: fruit &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;pineapple&quot;) str_locate(fruit, &quot;$&quot;) $代表以某个东西结尾. str_locate(fruit, &quot;a&quot;) str_locate(fruit, &quot;e&quot;) str_locate(fruit, c(&quot;a&quot;, &quot;b&quot;, &quot;p&quot;, &quot;p&quot;)) 然后我们再查找字母a在所有字符中的位置.如果没有符合要求的pattern,则会返回NA.也可以设置pattern为一个长度和string相同的vector. 如果想要查找所有符合要求的pattern的位置,要使用str_locate_all()函数: str_locate(fruit, &quot;a&quot;) str_locate_all(fruit, &quot;a&quot;) 返回是一个list. 9.3.5 从文本中提取(extract)匹配到的group 函数为: str_match(string, pattern) str_match_all(string, pattern) 这两个函数跟str_extract()有些类似. 例子: strings &lt;- c(&quot; 219 733 8965&quot;, &quot;329-293-8753 &quot;, &quot;banana&quot;, &quot;595 794 7569&quot;, &quot;387 287 6718&quot;, &quot;apple&quot;, &quot;233.398.9187 &quot;, &quot;482 952 3315&quot;, &quot;239 923 8115 and 842 566 4692&quot;, &quot;Work: 579-499-7527&quot;, &quot;$1000&quot;, &quot;Home: 543.355.3679&quot;) phone &lt;- &quot;([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})&quot; phone代表符合电话号码的格式: 第一个group: 小括号括起来的,数字2-9其中一个,重复一次(后面没有限定数量,则代表重复一次);数字0-9.重复两次. 然后中间是-或者空格,或者任意一个字符. group 2: 小括号括起来的.0-9任意数字重复三次.然后中间是-或者空格,或者任意一个字符. group 3: 小括号括起来的.0-9任意数字重复四次. str_extract(strings, phone) ## [1] &quot;219 733 8965&quot; &quot;329-293-8753&quot; NA &quot;595 794 7569&quot; &quot;387 287 6718&quot; NA &quot;233.398.9187&quot; &quot;482 952 3315&quot; ## [9] &quot;239 923 8115&quot; &quot;579-499-7527&quot; NA &quot;543.355.3679&quot; 这时候我们试试使用str_match()函数: str_match(strings, phone) ## [,1] [,2] [,3] [,4] ## [1,] &quot;219 733 8965&quot; &quot;219&quot; &quot;733&quot; &quot;8965&quot; ## [2,] &quot;329-293-8753&quot; &quot;329&quot; &quot;293&quot; &quot;8753&quot; ## [3,] NA NA NA NA ## [4,] &quot;595 794 7569&quot; &quot;595&quot; &quot;794&quot; &quot;7569&quot; ## [5,] &quot;387 287 6718&quot; &quot;387&quot; &quot;287&quot; &quot;6718&quot; ## [6,] NA NA NA NA ## [7,] &quot;233.398.9187&quot; &quot;233&quot; &quot;398&quot; &quot;9187&quot; ## [8,] &quot;482 952 3315&quot; &quot;482&quot; &quot;952&quot; &quot;3315&quot; ## [9,] &quot;239 923 8115&quot; &quot;239&quot; &quot;923&quot; &quot;8115&quot; ## [10,] &quot;579-499-7527&quot; &quot;579&quot; &quot;499&quot; &quot;7527&quot; ## [11,] NA NA NA NA ## [12,] &quot;543.355.3679&quot; &quot;543&quot; &quot;355&quot; &quot;3679&quot; 可以看到,除了将整体pattern匹配出来之后,还将每个group(也就是括号括起来的部分)分别匹配出来了. str_extract_all(strings, phone) ## [[1]] ## [1] &quot;219 733 8965&quot; ## ## [[2]] ## [1] &quot;329-293-8753&quot; ## ## [[3]] ## character(0) ## ## [[4]] ## [1] &quot;595 794 7569&quot; ## ## [[5]] ## [1] &quot;387 287 6718&quot; ## ## [[6]] ## character(0) ## ## [[7]] ## [1] &quot;233.398.9187&quot; ## ## [[8]] ## [1] &quot;482 952 3315&quot; ## ## [[9]] ## [1] &quot;239 923 8115&quot; &quot;842 566 4692&quot; ## ## [[10]] ## [1] &quot;579-499-7527&quot; ## ## [[11]] ## character(0) ## ## [[12]] ## [1] &quot;543.355.3679&quot; str_match_all(strings, phone) ## [[1]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;219 733 8965&quot; &quot;219&quot; &quot;733&quot; &quot;8965&quot; ## ## [[2]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;329-293-8753&quot; &quot;329&quot; &quot;293&quot; &quot;8753&quot; ## ## [[3]] ## [,1] [,2] [,3] [,4] ## ## [[4]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;595 794 7569&quot; &quot;595&quot; &quot;794&quot; &quot;7569&quot; ## ## [[5]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;387 287 6718&quot; &quot;387&quot; &quot;287&quot; &quot;6718&quot; ## ## [[6]] ## [,1] [,2] [,3] [,4] ## ## [[7]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;233.398.9187&quot; &quot;233&quot; &quot;398&quot; &quot;9187&quot; ## ## [[8]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;482 952 3315&quot; &quot;482&quot; &quot;952&quot; &quot;3315&quot; ## ## [[9]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;239 923 8115&quot; &quot;239&quot; &quot;923&quot; &quot;8115&quot; ## [2,] &quot;842 566 4692&quot; &quot;842&quot; &quot;566&quot; &quot;4692&quot; ## ## [[10]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;579-499-7527&quot; &quot;579&quot; &quot;499&quot; &quot;7527&quot; ## ## [[11]] ## [,1] [,2] [,3] [,4] ## ## [[12]] ## [,1] [,2] [,3] [,4] ## [1,] &quot;543.355.3679&quot; &quot;543&quot; &quot;355&quot; &quot;3679&quot; 另外一个例子: x &lt;- c(&quot;&lt;a&gt; &lt;b&gt;&quot;, &quot;&lt;a&gt; &lt;&gt;&quot;, &quot;&lt;a&gt;&quot;, &quot;&quot;, NA) str_match(x, &quot;&lt;(.*?)&gt; &lt;(.*?)&gt;&quot;) ## [,1] [,2] [,3] ## [1,] &quot;&lt;a&gt; &lt;b&gt;&quot; &quot;a&quot; &quot;b&quot; ## [2,] &quot;&lt;a&gt; &lt;&gt;&quot; &quot;a&quot; &quot;&quot; ## [3,] NA NA NA ## [4,] NA NA NA ## [5,] NA NA NA str_match_all(x, &quot;&lt;(.*?)&gt;&quot;) ## [[1]] ## [,1] [,2] ## [1,] &quot;&lt;a&gt;&quot; &quot;a&quot; ## [2,] &quot;&lt;b&gt;&quot; &quot;b&quot; ## ## [[2]] ## [,1] [,2] ## [1,] &quot;&lt;a&gt;&quot; &quot;a&quot; ## [2,] &quot;&lt;&gt;&quot; &quot;&quot; ## ## [[3]] ## [,1] [,2] ## [1,] &quot;&lt;a&gt;&quot; &quot;a&quot; ## ## [[4]] ## [,1] [,2] ## ## [[5]] ## [,1] [,2] ## [1,] NA NA str_extract(x, &quot;&lt;.*?&gt;&quot;) ## [1] &quot;&lt;a&gt;&quot; &quot;&lt;a&gt;&quot; &quot;&lt;a&gt;&quot; NA NA str_extract_all(x, &quot;&lt;.*?&gt;&quot;) ## [[1]] ## [1] &quot;&lt;a&gt;&quot; &quot;&lt;b&gt;&quot; ## ## [[2]] ## [1] &quot;&lt;a&gt;&quot; &quot;&lt;&gt;&quot; ## ## [[3]] ## [1] &quot;&lt;a&gt;&quot; ## ## [[4]] ## character(0) ## ## [[5]] ## [1] NA &lt;(.*?)&gt;其中的*?是贪婪用法,表示重复任意次,但尽可能少重复.请参考这一章正则表达式. 9.3.6 从文本中去除匹配到的pattern 函数: str_remove(string, pattern) str_remove_all(string, pattern) 与str_replace用法作用一致.但是str_replace可以替换成其他pattern. 例子: fruits &lt;- c(&quot;one apple&quot;, &quot;two pears&quot;, &quot;three bananas&quot;) str_remove(fruits, &quot;[aeiou]&quot;) ## [1] &quot;ne apple&quot; &quot;tw pears&quot; &quot;thre bananas&quot; str_remove_all(fruits, &quot;[aeiou]&quot;) ## [1] &quot;n ppl&quot; &quot;tw prs&quot; &quot;thr bnns&quot; 9.3.7 从文本中替换匹配到的pattern 函数: str_replace(string, pattern, replacement) str_replace_all(string, pattern, replacement) 例子: fruits &lt;- c(&quot;one apple&quot;, &quot;two pears&quot;, &quot;three bananas&quot;) str_replace(fruits, &quot;[aeiou]&quot;, &quot;-&quot;) ## [1] &quot;-ne apple&quot; &quot;tw- pears&quot; &quot;thr-e bananas&quot; str_replace_all(fruits, &quot;[aeiou]&quot;, &quot;-&quot;) ## [1] &quot;-n- -ppl-&quot; &quot;tw- p--rs&quot; &quot;thr-- b-n-n-s&quot; str_replace_all(fruits, &quot;[aeiou]&quot;, toupper) ## [1] &quot;OnE ApplE&quot; &quot;twO pEArs&quot; &quot;thrEE bAnAnAs&quot; str_replace_all(fruits, &quot;b&quot;, NA_character_) ## [1] &quot;one apple&quot; &quot;two pears&quot; NA 从这个例子可以看出来,replacement也可以是一个函数,将匹配到的所有pattern使用该函数转换之后替换. str_replace(fruits, &quot;([aeiou])&quot;, &quot;\\\\1\\\\1&quot;) ## [1] &quot;oone apple&quot; &quot;twoo pears&quot; &quot;threee bananas&quot; Please enable JavaScript to view the comments powered by Disqus. "],
["references.html", "References", " References "]
]
